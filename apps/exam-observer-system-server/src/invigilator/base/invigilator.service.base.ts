/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Invigilator as PrismaInvigilator } from "@prisma/client";

export class InvigilatorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InvigilatorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.invigilator.count(args);
  }

  async invigilators<T extends Prisma.InvigilatorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvigilatorFindManyArgs>
  ): Promise<PrismaInvigilator[]> {
    return this.prisma.invigilator.findMany<Prisma.InvigilatorFindManyArgs>(
      args
    );
  }
  async invigilator<T extends Prisma.InvigilatorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvigilatorFindUniqueArgs>
  ): Promise<PrismaInvigilator | null> {
    return this.prisma.invigilator.findUnique(args);
  }
  async createInvigilator<T extends Prisma.InvigilatorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvigilatorCreateArgs>
  ): Promise<PrismaInvigilator> {
    return this.prisma.invigilator.create<T>(args);
  }
  async updateInvigilator<T extends Prisma.InvigilatorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvigilatorUpdateArgs>
  ): Promise<PrismaInvigilator> {
    return this.prisma.invigilator.update<T>(args);
  }
  async deleteInvigilator<T extends Prisma.InvigilatorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvigilatorDeleteArgs>
  ): Promise<PrismaInvigilator> {
    return this.prisma.invigilator.delete(args);
  }
}
