/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Invigilator } from "./Invigilator";
import { InvigilatorCountArgs } from "./InvigilatorCountArgs";
import { InvigilatorFindManyArgs } from "./InvigilatorFindManyArgs";
import { InvigilatorFindUniqueArgs } from "./InvigilatorFindUniqueArgs";
import { DeleteInvigilatorArgs } from "./DeleteInvigilatorArgs";
import { InvigilatorService } from "../invigilator.service";
@graphql.Resolver(() => Invigilator)
export class InvigilatorResolverBase {
  constructor(protected readonly service: InvigilatorService) {}

  async _invigilatorsMeta(
    @graphql.Args() args: InvigilatorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Invigilator])
  async invigilators(
    @graphql.Args() args: InvigilatorFindManyArgs
  ): Promise<Invigilator[]> {
    return this.service.invigilators(args);
  }

  @graphql.Query(() => Invigilator, { nullable: true })
  async invigilator(
    @graphql.Args() args: InvigilatorFindUniqueArgs
  ): Promise<Invigilator | null> {
    const result = await this.service.invigilator(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Invigilator)
  async deleteInvigilator(
    @graphql.Args() args: DeleteInvigilatorArgs
  ): Promise<Invigilator | null> {
    try {
      return await this.service.deleteInvigilator(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
