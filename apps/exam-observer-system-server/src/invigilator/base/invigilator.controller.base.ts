/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InvigilatorService } from "../invigilator.service";
import { InvigilatorCreateInput } from "./InvigilatorCreateInput";
import { Invigilator } from "./Invigilator";
import { InvigilatorFindManyArgs } from "./InvigilatorFindManyArgs";
import { InvigilatorWhereUniqueInput } from "./InvigilatorWhereUniqueInput";
import { InvigilatorUpdateInput } from "./InvigilatorUpdateInput";

export class InvigilatorControllerBase {
  constructor(protected readonly service: InvigilatorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Invigilator })
  async createInvigilator(
    @common.Body() data: InvigilatorCreateInput
  ): Promise<Invigilator> {
    return await this.service.createInvigilator({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Invigilator] })
  @ApiNestedQuery(InvigilatorFindManyArgs)
  async invigilators(@common.Req() request: Request): Promise<Invigilator[]> {
    const args = plainToClass(InvigilatorFindManyArgs, request.query);
    return this.service.invigilators({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Invigilator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async invigilator(
    @common.Param() params: InvigilatorWhereUniqueInput
  ): Promise<Invigilator | null> {
    const result = await this.service.invigilator({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Invigilator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInvigilator(
    @common.Param() params: InvigilatorWhereUniqueInput,
    @common.Body() data: InvigilatorUpdateInput
  ): Promise<Invigilator | null> {
    try {
      return await this.service.updateInvigilator({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Invigilator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInvigilator(
    @common.Param() params: InvigilatorWhereUniqueInput
  ): Promise<Invigilator | null> {
    try {
      return await this.service.deleteInvigilator({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
