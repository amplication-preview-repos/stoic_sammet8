/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Observer as PrismaObserver } from "@prisma/client";

export class ObserverServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ObserverCountArgs, "select">): Promise<number> {
    return this.prisma.observer.count(args);
  }

  async observers<T extends Prisma.ObserverFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ObserverFindManyArgs>
  ): Promise<PrismaObserver[]> {
    return this.prisma.observer.findMany<Prisma.ObserverFindManyArgs>(args);
  }
  async observer<T extends Prisma.ObserverFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ObserverFindUniqueArgs>
  ): Promise<PrismaObserver | null> {
    return this.prisma.observer.findUnique(args);
  }
  async createObserver<T extends Prisma.ObserverCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ObserverCreateArgs>
  ): Promise<PrismaObserver> {
    return this.prisma.observer.create<T>(args);
  }
  async updateObserver<T extends Prisma.ObserverUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ObserverUpdateArgs>
  ): Promise<PrismaObserver> {
    return this.prisma.observer.update<T>(args);
  }
  async deleteObserver<T extends Prisma.ObserverDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ObserverDeleteArgs>
  ): Promise<PrismaObserver> {
    return this.prisma.observer.delete(args);
  }
}
