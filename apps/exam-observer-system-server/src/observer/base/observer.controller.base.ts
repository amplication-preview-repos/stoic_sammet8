/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ObserverService } from "../observer.service";
import { ObserverCreateInput } from "./ObserverCreateInput";
import { Observer } from "./Observer";
import { ObserverFindManyArgs } from "./ObserverFindManyArgs";
import { ObserverWhereUniqueInput } from "./ObserverWhereUniqueInput";
import { ObserverUpdateInput } from "./ObserverUpdateInput";

export class ObserverControllerBase {
  constructor(protected readonly service: ObserverService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Observer })
  async createObserver(
    @common.Body() data: ObserverCreateInput
  ): Promise<Observer> {
    return await this.service.createObserver({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Observer] })
  @ApiNestedQuery(ObserverFindManyArgs)
  async observers(@common.Req() request: Request): Promise<Observer[]> {
    const args = plainToClass(ObserverFindManyArgs, request.query);
    return this.service.observers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Observer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async observer(
    @common.Param() params: ObserverWhereUniqueInput
  ): Promise<Observer | null> {
    const result = await this.service.observer({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Observer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateObserver(
    @common.Param() params: ObserverWhereUniqueInput,
    @common.Body() data: ObserverUpdateInput
  ): Promise<Observer | null> {
    try {
      return await this.service.updateObserver({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Observer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteObserver(
    @common.Param() params: ObserverWhereUniqueInput
  ): Promise<Observer | null> {
    try {
      return await this.service.deleteObserver({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
